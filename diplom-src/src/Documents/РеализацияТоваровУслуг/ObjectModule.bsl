
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения);	
	КонецЕсли;                                                 
	
	//{{Хохлова Т.В.    
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		//ЗаполнитьРеализацию(ДанныеЗаполнения);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
    КонецЕсли;
	//}
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	//{{Хохлова Т.В.
	ВидДоговораКлиента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВидДоговора");
	Если ВидДоговораКлиента = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Основание"));   
	КонецЕсли; 
	//}}
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Движения.ОбработкаЗаказов.Записывать = Истина;
	Движения.ОстаткиТоваров.Записывать = Истина;
	
	Движение = Движения.ОбработкаЗаказов.Добавить();
	Движение.Период = Дата;
	Движение.Контрагент = Контрагент;
	Движение.Договор = Договор;
	Движение.Заказ = Основание;
	Движение.СуммаОтгрузки = СуммаДокумента;
	
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.ОстаткиТоваров.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Контрагент = Контрагент;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Сумма = ТекСтрокаТовары.Сумма;
		Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла; 
	
	//{{Хохлова Т.В. Проведение по регистру ВыполненныеКлиентуРаботы
	ВидДоговораКлиента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВидДоговора");
	Если ВидДоговораКлиента <> Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда 
		Возврат;
	КонецЕсли;
	
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина; 
	
	Для Каждого ТекСтрокаУслуги Из Услуги Цикл
		Если ТекСтрокаУслуги.Номенклатура = Константы.ВКМ_НоменклатураРаботыСпециалиста.Получить() Тогда
			Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Клиент = Контрагент;  
			Движение.Договор = Договор;
			Движение.КоличествоЧасов = ТекСтрокаУслуги.Количество;
			Движение.СуммаКОплате = ТекСтрокаУслуги.Сумма;
		КонецЕсли;	
	КонецЦикла;   
	
	Движения.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВКМ_ВыполненныеКлиентуРаботыОстатки.Клиент КАК Клиент,
	|	ВКМ_ВыполненныеКлиентуРаботыОстатки.Договор КАК Договор,
	|	СУММА(ВКМ_ВыполненныеКлиентуРаботыОстатки.КоличествоЧасовОстаток) КАК Количество,
	|	СУММА(ВКМ_ВыполненныеКлиентуРаботыОстатки.СуммаКОплатеОстаток) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВКМ_ВыполненныеКлиентуРаботы.Остатки(
	|			&Дата,
	|			Клиент = &Контрагент
	|				И Договор = &Договор) КАК ВКМ_ВыполненныеКлиентуРаботыОстатки
	|ГДЕ
	|	ВКМ_ВыполненныеКлиентуРаботыОстатки.КоличествоЧасовОстаток < 0
	|	И ВКМ_ВыполненныеКлиентуРаботыОстатки.СуммаКОплатеОстаток < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВКМ_ВыполненныеКлиентуРаботыОстатки.Клиент,
	|	ВКМ_ВыполненныеКлиентуРаботыОстатки.Договор";
	
	Запрос.УстановитьПараметр("Дата", Новый Граница(МоментВремени(),ВидГраницы.Включая)
	);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл	
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Отстутствуют услуги для выставления клиенту %1 по договору %2", Выборка.Клиент, Выборка.Договор));
			Отказ = Истина; 
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	//}}	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Организация КАК Организация,
	               |	ЗаказПокупателя.Контрагент КАК Контрагент,
	               |	ЗаказПокупателя.Договор КАК Договор,
	               |	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	               |	ЗаказПокупателя.Товары.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Товары,
	               |	ЗаказПокупателя.Услуги.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Услуги
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	ТоварыОснования = Выборка.Товары.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), ТоварыОснования);
	КонецЦикла;
	
	УслугиОснования = Выборка.Услуги.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Услуги.Добавить(), УслугиОснования);
	КонецЦикла;
	
	Основание = ДанныеЗаполнения;
	
КонецПроцедуры  

Функция ВыполнитьАвтозаполнение(Отказ = Ложь) Экспорт
	//{{Хохлова Т.В.
	АбонентПлата = Константы.ВКМ_НоменклатураАбонентскаяПлата.Получить();
	РаботыСпециалиста = Константы.ВКМ_НоменклатураРаботыСпециалиста.Получить(); 
	
	Если АбонентПлата = Неопределено ИЛИ  РаботыСпециалиста = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю("Не заполнена константа 'Номенклатура абонентская плата' или константа 'Номенклатура работы специалиста'",,,,Отказ); 
		Отказ = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВКМ_ВыполненныеКлиентуРаботыОстатки.Клиент КАК Клиент,
	|	ВКМ_ВыполненныеКлиентуРаботыОстатки.Договор КАК Договор,
	|	СУММА(ВКМ_ВыполненныеКлиентуРаботыОстатки.КоличествоЧасовОстаток) КАК Количество,
	|	СУММА(ВКМ_ВыполненныеКлиентуРаботыОстатки.СуммаКОплатеОстаток) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВКМ_ВыполненныеКлиентуРаботы.Остатки(
	|			&Период,
	|			Клиент = &Контрагент
	|				И Договор = &Договор) КАК ВКМ_ВыполненныеКлиентуРаботыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВКМ_ВыполненныеКлиентуРаботыОстатки.Клиент,
	|	ВКМ_ВыполненныеКлиентуРаботыОстатки.Договор";
	
	Запрос.УстановитьПараметр("Период", Новый Граница(МоментВремени(), ВидГраницы.Включая)); 
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);  
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если РезультатЗапроса.Пустой() Тогда   
		Отказ = Истина;
		Возврат Новый Массив;
	КонецЕсли;	
		
	Выборка = РезультатЗапроса.Выбрать();
	
	ДанныеЗаполнения = Новый Массив; 
	
	Пока Выборка.Следующий() Цикл
		СтруктураУслуги = Новый Структура;
		СтруктураУслуги.Вставить("Номенклатура", РаботыСпециалиста);
		СтруктураУслуги.Вставить("Количество",Выборка.Количество); 
		СтруктураУслуги.Вставить("Сумма",Выборка.Сумма); 
		СтруктураУслуги.Вставить("Цена",?(Выборка.Количество <> 0, Выборка.Сумма / Выборка.Количество, 0)); 
		ДанныеЗаполнения.Добавить(СтруктураУслуги);
	КонецЦикла; 
	
	СуммаАбонентПлаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВКМ_СуммаАбонентскойПлаты");
	Если НЕ ЗначениеЗаполнено(СуммаАбонентПлаты) Тогда
		ОбщегоНазначения.СообщитьПользователю("В договоре не заполнена сумма абонентской платы",,,,Отказ); 
		Отказ = Истина;
	КонецЕсли;  
	
	СтруктураАбонетПлата = Новый Структура;
	СтруктураАбонетПлата.Вставить("Номенклатура", АбонентПлата);
	СтруктураАбонетПлата.Вставить("Количество", 1);
	СтруктураАбонетПлата.Вставить("Цена", СуммаАбонентПлаты);
	СтруктураАбонетПлата.Вставить("Сумма", СуммаАбонентПлаты);  
	ДанныеЗаполнения.Добавить(СтруктураАбонетПлата);
	
	Возврат ДанныеЗаполнения;
	//}}
КонецФункции

#КонецОбласти

#КонецЕсли
